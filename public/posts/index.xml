<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Michael Bach</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Michael Bach</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 25 Oct 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Clustering with R</title>
            <link>/posts/clustering-with-r/</link>
            <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/clustering-with-r/</guid>
            <description>TL;DR
Some summary.
 Clustering is an unsupervised learning method and helps grouping data points into clusters based on some similarity measures. As there are many clustering techniques out there, it’s vital to make sure to understand the underlying task and variables to choose the appropriate technique. Some common methods are:
 Partitional Clustering Hierarchical Clustring Fuzzy Clustering Density-Based Clustering Model-Based Clustering  In this post I’ll cover the ones I’ve used the most so far.</description>
            <content type="html"><![CDATA[
<script src="/rmarkdown-libs/htmlwidgets/htmlwidgets.js"></script>
<script src="/rmarkdown-libs/plotly-binding/plotly.js"></script>
<script src="/rmarkdown-libs/typedarray/typedarray.min.js"></script>
<script src="/rmarkdown-libs/jquery/jquery.min.js"></script>
<link href="/rmarkdown-libs/crosstalk/css/crosstalk.css" rel="stylesheet" />
<script src="/rmarkdown-libs/crosstalk/js/crosstalk.min.js"></script>
<link href="/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css" rel="stylesheet" />
<script src="/rmarkdown-libs/plotly-main/plotly-latest.min.js"></script>


<hr />
<blockquote>
<p><strong>TL;DR</strong></p>
<p>Some summary.</p>
</blockquote>
<hr />
<p>Clustering is an unsupervised learning method and helps grouping data points into clusters based on some similarity measures. As there are many clustering techniques out there, it’s vital to make sure to understand the underlying task and variables to choose the appropriate technique. Some common methods are:</p>
<ul>
<li>Partitional Clustering</li>
<li>Hierarchical Clustring</li>
<li>Fuzzy Clustering</li>
<li>Density-Based Clustering</li>
<li>Model-Based Clustering</li>
</ul>
<p>In this post I’ll cover the ones I’ve used the most so far. I’ll give some examples using the popular <em>iris</em> data set.</p>
<div id="the-data-set" class="section level2">
<h2>The data set</h2>
<p>The data set consists of 3 species, encoded as factors (<em>setosa</em>, <em>versicolor</em>, <em>virginica</em>). These species are all flowers and have different sepal and petal length and width, which are reported.</p>
<p>If we want to simply plot the data by group, we’ll see that the groups differ nicely from each other.</p>
<pre class="r"><code>a &lt;- list(text = &quot;Sepal Width&quot;, x = 1, y = 8.5, allign = &quot;center&quot;, showarrow = FALSE)
fig_sepal_w &lt;- plot_ly(data = dt, y = ~sepal_width, color = ~species, type = &quot;box&quot;) %&gt;%
  layout(annotations = a)

a$text &lt;- &quot;Sepal Length&quot;
fig_sepal_l &lt;- plot_ly(data = dt, y = ~sepal_length, color = ~species, type = &quot;box&quot;) %&gt;% 
  layout(annotations = a)

a$text &lt;- &quot;Petal Width&quot;
fig_petal_w &lt;- plot_ly(data = dt, y = ~petal_width, color = ~species, type = &quot;box&quot;) %&gt;% 
  layout(annotations = a)

a$text &lt;- &quot;Petal Length&quot;
fig_petal_l &lt;- plot_ly(data = dt, y = ~petal_length, color = ~species, type = &quot;box&quot;) %&gt;% 
  layout(annotations = a)

fig &lt;- subplot(fig_sepal_w, fig_sepal_l, fig_petal_w, fig_petal_l, shareY = TRUE) %&gt;% 
  layout(showlegend = FALSE)

fig</code></pre>
<div id="htmlwidget-1" style="width:672px;height:480px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-1">{"x":{"data":[{"fillcolor":"rgba(102,194,165,0.5)","y":[3.5,3,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3,3,4,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.6,3,3.4,3.5,2.3,3.2,3.5,3.8,3,3.8,3.2,3.7,3.3],"type":"box","name":"setosa","marker":{"color":"rgba(102,194,165,1)","line":{"color":"rgba(102,194,165,1)"}},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x","yaxis":"y","frame":null},{"fillcolor":"rgba(252,141,98,0.5)","y":[3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2,3,2.2,2.9,2.9,3.1,3,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3,2.8,3,2.9,2.6,2.4,2.4,2.7,2.7,3,3.4,3.1,2.3,3,2.5,2.6,3,2.6,2.3,2.7,3,2.9,2.9,2.5,2.8],"type":"box","name":"versicolor","marker":{"color":"rgba(252,141,98,1)","line":{"color":"rgba(252,141,98,1)"}},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x","yaxis":"y","frame":null},{"fillcolor":"rgba(141,160,203,0.5)","y":[3.3,2.7,3,2.9,3,3,2.5,2.9,2.5,3.6,3.2,2.7,3,2.5,2.8,3.2,3,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3,2.8,3,2.8,3.8,2.8,2.8,2.6,3,3.4,3.1,3,3.1,3.1,3.1,2.7,3.2,3.3,3,2.5,3,3.4,3],"type":"box","name":"virginica","marker":{"color":"rgba(141,160,203,1)","line":{"color":"rgba(141,160,203,1)"}},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x","yaxis":"y","frame":null},{"fillcolor":"rgba(102,194,165,0.5)","y":[5.1,4.9,4.7,4.6,5,5.4,4.6,5,4.4,4.9,5.4,4.8,4.8,4.3,5.8,5.7,5.4,5.1,5.7,5.1,5.4,5.1,4.6,5.1,4.8,5,5,5.2,5.2,4.7,4.8,5.4,5.2,5.5,4.9,5,5.5,4.9,4.4,5.1,5,4.5,4.4,5,5.1,4.8,5.1,4.6,5.3,5],"type":"box","name":"setosa","marker":{"color":"rgba(102,194,165,1)","line":{"color":"rgba(102,194,165,1)"}},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x2","yaxis":"y","frame":null},{"fillcolor":"rgba(252,141,98,0.5)","y":[7,6.4,6.9,5.5,6.5,5.7,6.3,4.9,6.6,5.2,5,5.9,6,6.1,5.6,6.7,5.6,5.8,6.2,5.6,5.9,6.1,6.3,6.1,6.4,6.6,6.8,6.7,6,5.7,5.5,5.5,5.8,6,5.4,6,6.7,6.3,5.6,5.5,5.5,6.1,5.8,5,5.6,5.7,5.7,6.2,5.1,5.7],"type":"box","name":"versicolor","marker":{"color":"rgba(252,141,98,1)","line":{"color":"rgba(252,141,98,1)"}},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x2","yaxis":"y","frame":null},{"fillcolor":"rgba(141,160,203,0.5)","y":[6.3,5.8,7.1,6.3,6.5,7.6,4.9,7.3,6.7,7.2,6.5,6.4,6.8,5.7,5.8,6.4,6.5,7.7,7.7,6,6.9,5.6,7.7,6.3,6.7,7.2,6.2,6.1,6.4,7.2,7.4,7.9,6.4,6.3,6.1,7.7,6.3,6.4,6,6.9,6.7,6.9,5.8,6.8,6.7,6.7,6.3,6.5,6.2,5.9],"type":"box","name":"virginica","marker":{"color":"rgba(141,160,203,1)","line":{"color":"rgba(141,160,203,1)"}},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x2","yaxis":"y","frame":null},{"fillcolor":"rgba(102,194,165,0.5)","y":[0.2,0.2,0.2,0.2,0.2,0.4,0.3,0.2,0.2,0.1,0.2,0.2,0.1,0.1,0.2,0.4,0.4,0.3,0.3,0.3,0.2,0.4,0.2,0.5,0.2,0.2,0.4,0.2,0.2,0.2,0.2,0.4,0.1,0.2,0.2,0.2,0.2,0.1,0.2,0.2,0.3,0.3,0.2,0.6,0.4,0.3,0.2,0.2,0.2,0.2],"type":"box","name":"setosa","marker":{"color":"rgba(102,194,165,1)","line":{"color":"rgba(102,194,165,1)"}},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x3","yaxis":"y","frame":null},{"fillcolor":"rgba(252,141,98,0.5)","y":[1.4,1.5,1.5,1.3,1.5,1.3,1.6,1,1.3,1.4,1,1.5,1,1.4,1.3,1.4,1.5,1,1.5,1.1,1.8,1.3,1.5,1.2,1.3,1.4,1.4,1.7,1.5,1,1.1,1,1.2,1.6,1.5,1.6,1.5,1.3,1.3,1.3,1.2,1.4,1.2,1,1.3,1.2,1.3,1.3,1.1,1.3],"type":"box","name":"versicolor","marker":{"color":"rgba(252,141,98,1)","line":{"color":"rgba(252,141,98,1)"}},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x3","yaxis":"y","frame":null},{"fillcolor":"rgba(141,160,203,0.5)","y":[2.5,1.9,2.1,1.8,2.2,2.1,1.7,1.8,1.8,2.5,2,1.9,2.1,2,2.4,2.3,1.8,2.2,2.3,1.5,2.3,2,2,1.8,2.1,1.8,1.8,1.8,2.1,1.6,1.9,2,2.2,1.5,1.4,2.3,2.4,1.8,1.8,2.1,2.4,2.3,1.9,2.3,2.5,2.3,1.9,2,2.3,1.8],"type":"box","name":"virginica","marker":{"color":"rgba(141,160,203,1)","line":{"color":"rgba(141,160,203,1)"}},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x3","yaxis":"y","frame":null},{"fillcolor":"rgba(102,194,165,0.5)","y":[1.4,1.4,1.3,1.5,1.4,1.7,1.4,1.5,1.4,1.5,1.5,1.6,1.4,1.1,1.2,1.5,1.3,1.4,1.7,1.5,1.7,1.5,1,1.7,1.9,1.6,1.6,1.5,1.4,1.6,1.6,1.5,1.5,1.4,1.5,1.2,1.3,1.4,1.3,1.5,1.3,1.3,1.3,1.6,1.9,1.4,1.6,1.4,1.5,1.4],"type":"box","name":"setosa","marker":{"color":"rgba(102,194,165,1)","line":{"color":"rgba(102,194,165,1)"}},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x4","yaxis":"y","frame":null},{"fillcolor":"rgba(252,141,98,0.5)","y":[4.7,4.5,4.9,4,4.6,4.5,4.7,3.3,4.6,3.9,3.5,4.2,4,4.7,3.6,4.4,4.5,4.1,4.5,3.9,4.8,4,4.9,4.7,4.3,4.4,4.8,5,4.5,3.5,3.8,3.7,3.9,5.1,4.5,4.5,4.7,4.4,4.1,4,4.4,4.6,4,3.3,4.2,4.2,4.2,4.3,3,4.1],"type":"box","name":"versicolor","marker":{"color":"rgba(252,141,98,1)","line":{"color":"rgba(252,141,98,1)"}},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x4","yaxis":"y","frame":null},{"fillcolor":"rgba(141,160,203,0.5)","y":[6,5.1,5.9,5.6,5.8,6.6,4.5,6.3,5.8,6.1,5.1,5.3,5.5,5,5.1,5.3,5.5,6.7,6.9,5,5.7,4.9,6.7,4.9,5.7,6,4.8,4.9,5.6,5.8,6.1,6.4,5.6,5.1,5.6,6.1,5.6,5.5,4.8,5.4,5.6,5.1,5.1,5.9,5.7,5.2,5,5.2,5.4,5.1],"type":"box","name":"virginica","marker":{"color":"rgba(141,160,203,1)","line":{"color":"rgba(141,160,203,1)"}},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x4","yaxis":"y","frame":null}],"layout":{"xaxis":{"domain":[0,0.23],"automargin":true,"anchor":"y"},"xaxis2":{"domain":[0.27,0.48],"automargin":true,"anchor":"y"},"xaxis3":{"domain":[0.52,0.73],"automargin":true,"anchor":"y"},"xaxis4":{"domain":[0.77,1],"automargin":true,"anchor":"y"},"yaxis":{"domain":[0,1],"automargin":true,"title":"sepal_width","anchor":"x"},"annotations":[{"text":"Sepal Width","x":1,"y":8.5,"allign":"center","showarrow":false,"xref":"x","yref":"y"},{"text":"Sepal Length","x":1,"y":8.5,"allign":"center","showarrow":false,"xref":"x2","yref":"y"},{"text":"Petal Width","x":1,"y":8.5,"allign":"center","showarrow":false,"xref":"x3","yref":"y"},{"text":"Petal Length","x":1,"y":8.5,"allign":"center","showarrow":false,"xref":"x4","yref":"y"}],"shapes":[],"images":[],"margin":{"b":40,"l":60,"t":25,"r":10},"hovermode":"closest","showlegend":false},"attrs":{"7b48594af816":{"y":{},"color":{},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"type":"box"},"7b4831df0d8e":{"y":{},"color":{},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"type":"box"},"7b484baa4fa6":{"y":{},"color":{},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"type":"box"},"7b4827b0d38b":{"y":{},"color":{},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"type":"box"}},"source":"A","config":{"showSendToCloud":false},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"subplot":true,"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
<p>Based on this first intuition, we should get some nice clustering results on the data set.</p>
</div>
<div id="k-means-clustering" class="section level2">
<h2>K-Means Clustering</h2>
<p>To begin with, there is the all time favorite when it comes to clustering - the <em>k-means</em> algorithm. This algorithm basically tries to partition the observations in <em>k</em> clusters.</p>
</div>
<div id="hierarchical-clustering" class="section level2">
<h2>Hierarchical Clustering</h2>
<p><a href="https://towardsdatascience.com/the-5-clustering-algorithms-data-scientists-need-to-know-a36d136ef68" class="uri">https://towardsdatascience.com/the-5-clustering-algorithms-data-scientists-need-to-know-a36d136ef68</a>
<a href="https://www.datanovia.com/en/blog/types-of-clustering-methods-overview-and-quick-start-r-code/" class="uri">https://www.datanovia.com/en/blog/types-of-clustering-methods-overview-and-quick-start-r-code/</a>
<a href="https://www.researchgate.net/publication/220571682_An_overview_of_clustering_methods" class="uri">https://www.researchgate.net/publication/220571682_An_overview_of_clustering_methods</a></p>
</div>
]]></content>
        </item>
        
        <item>
            <title>Customize Docker Container</title>
            <link>/posts/custom-docker-image/</link>
            <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/custom-docker-image/</guid>
            <description>TL;DR
Creating your own Docker image is fairly easy, when using a parent image. Basically, you pull the parent image and set up your specifications according to your needs for your custom container. You can specify pretty much everything in your Dockerfile.
 In this post I’d like to give a quick overview of how to customize a python container to run your app or to use it as playground.</description>
            <content type="html"><![CDATA[


<p><img src="/images/Docker_logo.png" /></p>
<hr />
<blockquote>
<p><strong>TL;DR</strong></p>
<p>Creating your own Docker image is fairly easy, when using a parent image. Basically, you pull the parent image and set up your specifications according to your needs for your custom container. You can specify pretty much everything in your <em>Dockerfile</em>.</p>
</blockquote>
<hr />
<p>In this post I’d like to give a quick overview of how to customize a python container to run your app or to use it as playground. You could either build an image from scratch or use a parent image and customize it to your needs. I’ll focus on customizing a parent image as it suits my needs perfectly. Creating your own image might be necessary for certain usecases. However, most of the time it’s sufficient building on a parent image as many smart people already invested some time in developing it.</p>
<div id="basic-requirements" class="section level2">
<h2>Basic Requirements</h2>
<p>To begin with, you should have Docker installed. If you don’t have Docker installed yet, check out my post on <a href="https://mic-bac.netlify.app/posts/getting-started-with-docker/">Getting started with Docker</a>.</p>
<p>Create a folder where you would like to save your Dockerfile and any additional files you might need.</p>
<p>That’s pretty much it! Now you’re good to start customizing your Docker image.</p>
</div>
<div id="dockerfile" class="section level2">
<h2>Dockerfile</h2>
<p>If you want to run your app in a container, you can use a Dockerfile. In the following, I provided a basic example to give you an idea how it could work, including some extras [optional].</p>
<p>In your Dockerfile, you’ll need to add some arguments. Some of them are required and some are useful to specifiy your custom image:</p>
<ul>
<li><code>FROM</code> initializes a new build stage and sets the Base Image for subsequent instructions. A valid Dockerfile must start with the <code>FROM</code> instruction.</li>
<li><code>ARG</code> is the only instruction that may precede <code>FROM</code> in the Dockerfile. It’s basically used to specify variables in a Dockerfile. But, if it’s called before <code>FROM</code> it’s declared as being outside the building stage and cannot be used in further steps. If needed, you’ll have to call it again after <code>FROM</code> without a value.</li>
<li><code>WORKDIR</code> sets the working directory for any <code>RUN</code>, <code>CMD</code>, <code>ENTRYPOINT</code>, <code>COPY</code> and <code>ADD</code> instructions that follow it in the Dockerfile. If the <code>WORKDIR</code> doesn’t exist, it will be created even if it’s not used in any subsequent Dockerfile instruction.</li>
<li><code>COPY</code> copies new files or directories from the source and adds them to the filesystem of the container at the path destination <code>COPY &lt;src&gt; &lt;dest&gt;</code>.</li>
<li><code>RUN</code> will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile. <code>RUN</code> can either be used in shell form <code>RUN &lt;command&gt;</code> or exec form <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>. The exec form is parsed as a JSON array, which means that you must use double-quotes (&quot;) around words not single-quotes (’).</li>
<li><code>CMD</code> can only be called once in a Dockerfile (last <code>CMD</code> will take effect). It’s preferred to be used in the exec form CMD <code>[&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>. This option will execute whatever is specified. Here python is used to execute my <em>example.py</em> file.</li>
</ul>
<pre><code># add arguments for FROM
ARG VERSION=3.8

# chose your source
FROM python:${VERSION}

# add working directory if needed
WORKDIR /usr/src

# copy requirements for installation
COPY requirements.txt .

# install requirements
RUN pip install --no-cache-dir -r requirements.txt

# copy everything
COPY . .

# [optional] command to run on container start (script is executed, container stops after execution)
CMD [&quot;python&quot;, &quot;./example.py&quot;]</code></pre>
<p>The above example also requires a <em>requirements.txt</em> file indicating the necessary python libraries you would like to install in your container. For this example I don’t really need one but, I’d like to give an example of how you could make use of it. Especially, as this might be the most interesting aspect when customizing your python development container.</p>
<p>Within the file <em>example.py</em> I want to check if <em>pandas</em> was installed from my <em>requirements.txt</em> file. If the result is <em>True</em> we should have managed to install <em>pandas</em> in our container.</p>
<p>Your <em>requirements.txt</em> file could look like this:</p>
<pre><code>###### Requirements without Version Specifiers ######
pandas

###### Requirements with Version Specifiers ######
docopt == 0.6.1             # Version Matching. Must be version 0.6.1
keyring &gt;= 4.1.1            # Minimum version 4.1.1
coverage != 3.5             # Version Exclusion. Anything except version 3.5
Mopidy-Dirble ~= 1.1        # Compatible release. Same as &gt;= 1.1, == 1.*</code></pre>
<p>As your Docker file is executed sequentially and builds up your image. You need just one line of code in your terminal:</p>
<pre><code>$ docker build -t examplepy:hello /path/to/docker-file/location/</code></pre>
<p>You should see the status of every step you specified in your Dockerfile.</p>
<pre><code>Sending build context to Docker daemon
Step 1/7 : ARG VERSION=3.8
Step 2/7 : FROM python:${VERSION}
3.8: Pulling from library/python

...

Successfully built &lt;some_id&gt;
Successfully tagged examplepy:hello</code></pre>
<p>To check if your image was built use the commant <code>$ docker image ls -a</code> which lists your images.</p>
<pre><code>docker run --rm examplepy:hello</code></pre>
<p>With the following result (hopefully :)):</p>
<pre><code>Hello Docker World!
Pandas found:
True</code></pre>
<blockquote>
<p>Optionally, you could remove the execution line in your Dockerfile [<code>CMD</code>]</p>
</blockquote>
<p>Withoud the execution line you can keep your container open and e.g. connect to it with VS Code (use <code>--rm</code> to have your container removed after it’s stopped, <code>-d</code> to run it in the background, <code>-i</code> to keep STDIN open even if not attached so you can access it via VS Code while it’s runnig, for example, and <code>--name</code> to give your container a name tag).</p>
<pre><code>$ docker run --rm -d -i --name my_custom_container examplepy:hello</code></pre>
<p>Now you can check if your container is up and running (<code>$ docker container ls -a</code>). If you connect to it with your IDE, you can start using it as an development environment including all files copied into your working directory <code>/usr/src</code>.</p>
<p>I hope this post was informative. Feel free to contact me for any feedback :)</p>
</div>
]]></content>
        </item>
        
        <item>
            <title>Getting started with Docker</title>
            <link>/posts/getting-started-with-docker/</link>
            <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/getting-started-with-docker/</guid>
            <description>TL;DR
This post is meant to be a little cheat sheet for Docker setup and usage. Docker is a great tool to containerize your software products, which makes your products portable and usable in several areas (e.g. cloud or on-premises). Additionally, it is a great playground for developers as containers can offer a secure environment to try out something new without risking to break something. Furthermore, they scale nicely and are therefore rather resource-efficient.</description>
            <content type="html"><![CDATA[


<p><img src="/images/Docker_logo.png" /></p>
<hr />
<blockquote>
<p><strong>TL;DR</strong></p>
<p>This post is meant to be a little cheat sheet for Docker setup and usage. Docker is a great tool to containerize your software products, which makes your products portable and usable in several areas (e.g. cloud or on-premises). Additionally, it is a great playground for developers as containers can offer a secure environment to try out something new without risking to break something. Furthermore, they scale nicely and are therefore rather resource-efficient. Check out the official <a href="https://www.docker.com/resources/what-container">Docker website</a> for a more detailed overview.</p>
</blockquote>
<hr />
<p>This post is meant to be a little cheat sheet for Docker setup and usage. For a more general overview about Docker containers see the official <a href="https://www.docker.com/resources/what-container">Docker website</a> or the <a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/container-docker-introduction/">Introduction to Containers and Docker</a> from Microsoft. Just a quick note before going into detail: please, always examine scripts downloaded from the internet before running them locally.</p>
<div id="setup" class="section level2">
<h2>Setup</h2>
<p>Before starting the setup, you could check if you Docker is already installed and ready to use:</p>
<pre><code>$ docker --version
$ sudo docker run hello-world</code></pre>
<p>If that works out fine, you might just want to update docker.</p>
<div id="the-repository" class="section level3">
<h3>The Repository</h3>
<p>If you are on Ubuntu (like me), you need to remove old docker installations first. Therefore, use the following command:</p>
<pre><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc</code></pre>
<p>Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterwards, you can install and update Docker from the repository.</p>
<p>First, update the <code>apt</code> package index and install packages to allow <code>apt</code> to use a repository over HTTPS:</p>
<pre><code>$ sudo apt-get update

$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common</code></pre>
<p>Then add Docker’s official GPG key:</p>
<pre><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></pre>
<p>And finally, verify the key:</p>
<pre><code>$ sudo apt-key fingerprint 0EBFCD88

pub   rsa4096 2017-02-22 [SCEA]
      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;
sub   rsa4096 2017-02-22 [S]</code></pre>
<p>Then set up a stable repository:</p>
<pre><code>$ sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;</code></pre>
</div>
<div id="the-engine" class="section level3">
<h3>The Engine</h3>
<p>Install the latest version of Docker Engine and containerd.</p>
<pre><code>$ sudo apt-get install docker-ce docker-ce-cli containerd.io</code></pre>
<p>You can finish and verify your installation by testing the Docker Engine by running the <code>hello-world</code> image.</p>
<pre><code>$ sudo docker run hello-world</code></pre>
<p>This should work out fine. If there any troubles check this <a href="https://docs.docker.com/engine/install/ubuntu/">link</a>.</p>
<p>I ran in an issue when I tried to start my first container. I received the following error message: <em>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post <a href="http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/create" class="uri">http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/create</a>: dial unix /var/run/docker.sock: connect: permission denied.</em></p>
<p>The solution to this problem was to add the user to the Docker user group with <code>$ sudo usermod -aG docker SOMEUSERNAME</code> (then restart your computer).</p>
</div>
</div>
<div id="useful-docker-commands" class="section level2">
<h2>Useful Docker commands</h2>
<div id="build-a-container" class="section level3">
<h3>Build a Container</h3>
<p>As an example I’m building a container from the <code>rocker/rstudio:3.6.3</code> image. This means, that <a href="https://www.rocker-project.org/">rocker</a> provides us with an image for RStudio including R version 3.6.3.</p>
<pre><code>$ docker run --rm -d -v /media/path/to/local/file:/home/&lt;your_username&gt;/rstudio -p 8787:8787 -e PASSWORD=&lt;your_pw&gt; -e USER=&lt;your_username&gt; --name &lt;your_container_name&gt; rocker/rstudio:3.6.3</code></pre>
<p>If you don’t have the rocker/rstudio image yet, it’s automatically pulled from docker hub.
The arguments run, –rm, -d, -v, -e and -p are used to:</p>
<ul>
<li><code>run</code> start a container</li>
<li><code>--rm</code> remove the container automatically when it is stopped (all changes are lost – great to try some things out as it reduces cleaning steps)</li>
<li><code>-d</code> detach the container (container runs in background)</li>
<li><code>-v</code> bind mount a volume (e.g. a folder with data as in this example, see this <a href="https://github.com/rocker-org/rocker/wiki/Sharing-files-with-host-machine">link</a> for details)</li>
<li><code>-e</code> set the environment variables PASSWORD and USER</li>
<li><code>-p</code> publish a container’s port(s) to the host (here 8787:8787)</li>
<li><code>--name</code> give the container a name, so you don’t have to use the container ID (especially useful if you have multiple containers with the same image)</li>
</ul>
<p>More Docker run commands can be found on the official <a href="https://docs.docker.com/engine/reference/commandline/run/">Docker website</a>.</p>
<p>When you run the command with your specifications the container is set up.</p>
<p>Now, just open your browser and go to <em>localhost:8787</em> if you are on a Linux machine, otherwise try <a href="http://192.168.99.100:8787" class="uri">http://192.168.99.100:8787</a> in your browser (or follow the instructions <a href="https://github.com/rocker-org/rocker/wiki/Using-the-RStudio-image">here</a>. The following side should appear in your browser window:</p>
<p><img src="/images/rstudio-login.png" /></p>
<p>To log in use <your_username> and <your_pw> which you entered before.</p>
<p>After entering your credentials you should be able to see the RStudio GUI. If you added a folder to mount as volume, the folder content should be embedded as well.</p>
</div>
<div id="system-maintenance" class="section level3">
<h3>System Maintenance</h3>
<blockquote>
<p><code>$ docker system info</code></p>
</blockquote>
<p>This command gives you an overview of e.g. how many containers you have/are running/stopped/paused, how many images are available locally, or the Docker root directory.</p>
<blockquote>
<p><code>$ docker system prune</code></p>
</blockquote>
<p>The <code>prune</code> command removes all stopped containers, dangling images, and unused networks. It will prompt a warning message about what’s going to happen, so be careful with this one.</p>
<p>By default, the command doesn’t remove unused volumes or networks to prevent losing important data. To remove all unused volumes, pass the –volumes option <code>$ docker system prune --volumes</code>. Alternatively use <code>$ docker volume prune</code>.
To remove all unused networks use <code>$ docker network prune</code>.</p>
</div>
<div id="container-maintenance" class="section level3">
<h3>Container Maintenance</h3>
<blockquote>
<p><code>$ docker container ls -a</code></p>
</blockquote>
<p>List all containers.</p>
<blockquote>
<p><code>$ docker container rm &lt;container ID&gt;</code></p>
</blockquote>
<p>Remove the container with container ID <container ID> (Note: The container has to be stopped before it can be removed).</p>
<blockquote>
<p><code>$ docker container prune</code></p>
</blockquote>
<p>Removes all stopped containers. You might want to verify which containers are not running (stopped) and therefore pruned before you run the command with<code>$ docker container ls -a --filter status=exited --filter status=created</code>.</p>
<p>The <code>prune</code> command allows you to remove containers based on a filter condition with the <code>--filter</code> option. With multiple <code>--filter</code> options you can use more than one filter condition.</p>
<p>At the time of the writing of this article, the currently supported filters are until and label. You can specify more than one filter by using multiple –filter options.</p>
<p>For example, the following command removes containers created more than 5 minutes ago <code>$ docker container prune --filter &quot;until=5m&quot;</code>.</p>
</div>
<div id="image-maintenance" class="section level3">
<h3>Image Maintenance</h3>
<blockquote>
<p><code>$ docker image ls -a</code></p>
</blockquote>
<p>List all Docker images.</p>
<blockquote>
<p><code>$ docker image rm &lt;image ID&gt;</code></p>
</blockquote>
<p>Remove the image with image ID <image ID> (Note: If the image is used by an existing container removing it is not allowed).</p>
<blockquote>
<p><code>$ docker image prune</code></p>
</blockquote>
<p>Removes dangled and unused Docker images. A dangling image is an image that is not tagged and is not used by any container.</p>
<p>For more information on Docker commands check out the official <a href="https://docs.docker.com/">Docker documentation</a>.</p>
<p>I hope this post was informative. Feel free to contact me for any feedback :)</p>
</div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Setting up your first build</title>
            <link>/posts/setting-up-your-first-build/</link>
            <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/setting-up-your-first-build/</guid>
            <description>TL;DR
After building your own PC you might want to install your OS. Most will choose between Windows and a Linux distribution, but you can also have all in one with WSL 2 (Windows Subsystem for Linux) or both with a dual boot mode. I describe the setup for a dual boot mode on two physically separated SSDs. Most information is straight forward and easy to find on the Microsoft or e.</description>
            <content type="html"><![CDATA[


<hr />
<blockquote>
<p><strong>TL;DR</strong></p>
<p>After building your own PC you might want to install your OS. Most will choose between Windows and a Linux distribution, but you can also have all in one with WSL 2 (Windows Subsystem for Linux) or both with a dual boot mode. I describe the setup for a dual boot mode on two physically separated SSDs. Most information is straight forward and easy to find on the Microsoft or e.g. Ubuntu website for setting up your OS. You might find some links in the post helpful, if you need additional information.</p>
</blockquote>
<hr />
<p>In my previous post I wrote about building my own PC. But, without an OS it’s not that much fun (although it might look nice with some rgbs). Therefore, I’ll focus on the OS set-up in this post.</p>
<div id="operating-system" class="section level2">
<h2>Operating System</h2>
<p>For the most users the choice is between Windows or Linux. Although, it’s not necessary to choose between them anymore due to <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">WSL 2</a>, the Windows Subsystem for Linux. It allows you to install a full functional Linux kernel in Windows 10.</p>
<p>Still, when choosing my OS I decided to setup both, Windows and Linux, in dual boot mode and on two separate physical drives. The only things you need are an USB flash drive with enough storage (or CD/DVD - check if your BIOS lets you boot from the medium of your choice), another PC/notebook, and a stable internet connection.</p>
<div id="windows" class="section level3">
<h3>Windows</h3>
<p>Starting with the Windows installation - this one is pretty straight forward. Download the Windows creation tool and ISO file for the latest Windows version from the <a href="https://www.microsoft.com/en-us/software-download/">official Microsoft website</a>. Then use the tool to create your installation media. Additionally, you’ll need a product key for your installation. You could also finish the installation without one, but you won’t be able to use all features of your installation then, therefore I’d recommend to get a product key.</p>
<p>As soon as you have your installation media ready open the boot menu, which you can access by pressing a key during boot (check your mobo manual to find out which key - often <em>F12</em> or <em>del</em>). Then choose your boot medium. If everything works as expected an installation screen should pop up. Within the next steps you’ll need to choose your installation and type in your product key.</p>
<p>For certain components it might make sense to check if the necessary drivers are installed. Additionally, if you have multiple drives you should mount them. In my case the SSD including Windows was mounted - of course. But, I had to mount my HDD and format it to NTFS to use it with Windows.</p>
<p>That’s pretty much it! Now you’re good to go :)</p>
</div>
<div id="linux" class="section level3">
<h3>Linux</h3>
<p>There are many Linux distributions available. I decided to setup the latest Ubuntu Desktop version (20.04 Focal Fossa), because I think it’s great to have a large community if you run in any problems - and I like the look and feel. But, that’s just a personal preference.</p>
<p>You can find a detailed description of how to setup a bootable USB flash drive for your installation on the <a href="https://ubuntu.com/download">official Ubuntu website</a>.</p>
<p>Again, you have to open the boot menu and select your Ubuntu installation medium to boot from. After a few seconds you are able to choose to either install Ubuntu or to try it. If you are not sure if you want to install it, try it first.</p>
<p>If you decide to install it click on <em>Install Ubuntu</em>. Then select your preferred keyboard layout. At step <em>Updates and other Software</em> I decided to do the <em>Normal installation</em> instead of the <em>Minimal installation</em> to have all GUI related utilities available right after the installation. I also ticked the options in <em>Other options</em> to make sure everything works as expected.</p>
<p>At the <em>Installation type</em> section, I choose <em>Something else</em> as I wanted to have my own customized partition scheme on a separate SSD. To create a partition table select the device for your installation. Then click <em>New Partition Table…</em>. Use a forward slash (/) for your mount point, then you should be good to go. You might want to add a swap partition in case you run out of RAM with data intensive applications (see <a href="https://www.makeuseof.com/tag/swap-partition/" class="uri">https://www.makeuseof.com/tag/swap-partition/</a> for more details). I did not create any other partitions.</p>
<p>Finally, choose your timezone and user credentials and you’re good to go :).</p>
<p>If you need some screenshots or more in depth information, I found this post at <a href="https://www.linuxtechi.com/ubuntu-20-04-lts-installation-steps-screenshots/">Linux Techi</a> very informative.</p>
<p>What I’ve been struggling with was my additional HDD. During the Windows installation I formatted it as NTFS and mounted it in Windows but forgot to mount it permanently in Linux. When I used the HDD within Linux it was mounted without any problems, but it was mounted only when I explicitly used it. Therefore, paths to the folders changed slightly (e.g. my-storage/folder -&gt; my-storage1/folder) as the drive was newly mounted all the time. So I ended up with multiple paths in the end…</p>
<p>Luckily the solution was fairly simple:</p>
<ul>
<li>Go to Applications/Utilities/Disks</li>
<li>Highlight your drive</li>
<li>Click the little gear wheels and click <em>Edit Mount Options</em></li>
<li>Make sure that the option <em>Mount at system startup</em> is checked</li>
</ul>
<p>Alternatively you could modify your ftab file directly to mount your drive at system startup.</p>
<p>I hope this post was informative. Feel free to contact me for any feedback :)</p>
</div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Building your own tower</title>
            <link>/posts/building-your-own-tower/</link>
            <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/building-your-own-tower/</guid>
            <description>TL;DR
Before starting with a new build, know what you would like to use it for. Make sure to be aware if you need certain hardware for specific tasks (e.g. NVIDIA for deep learning). Check some websites to minimize compatibility issues (e.g. pc partpicker or logical increments) as well as the compatibility guidelines of your mobo. There are plenty YouTube tutorials, which are quite handy in terms of assembling guidelines (e.</description>
            <content type="html"><![CDATA[


<hr />
<blockquote>
<p><strong>TL;DR</strong></p>
<p>Before starting with a new build, know what you would like to use it for. Make sure to be aware if you need certain hardware for specific tasks (e.g. NVIDIA for deep learning). Check some websites to minimize compatibility issues (e.g. <a href="https://pcpartpicker.com/">pc partpicker</a> or <a href="https://www.logicalincrements.com/">logical increments</a>) as well as the compatibility guidelines of your mobo. There are plenty YouTube tutorials, which are quite handy in terms of assembling guidelines (e.g. <a href="https://www.youtube.com/channel/UCvWWf-LYjaujE50iYai8WgQ">Pauls’s Hardware</a> or <a href="https://www.youtube.com/channel/UCftcLVz-jtPXoH3cWUUDwYw">Bitwit</a>).</p>
</blockquote>
<hr />
<p>The call to build my own tower reached me quite late (still in my 20s though) as a tower PC wouldn’t have been very handy for me. And due to budget limitations not so much fun I guess :). However, during the COVID-19 pandemic I thought it would be fun to build my own PC and run some deep learning (DL) prototypes on it. Admittedly, I bought some games too…</p>
<p>In this post I’m going to explain how I built my PC and add some information and resources others might find helpful when building their own PC.</p>
<div id="choosing-your-parts" class="section level2">
<h2>Choosing your parts</h2>
<p>Choosing PC parts is the most time consuming but also the funniest part in my opinion. Still, it’s very critical because you can make the most mistakes.</p>
<p>First, be sure about what you really want to do with your PC.</p>
<ul>
<li>Are you planning to use it for office tasks and/or gaming only?</li>
<li>Would you like to run some ML models?</li>
<li>How about editing some photos and videos?</li>
<li>Are you going to upgrade/extend parts when you have more budget?</li>
<li>Or do you just want to surf the internet and have some fancy tower with rgb lightning in your living room?</li>
</ul>
<p>Most of these use cases involve a different budget and some special components and/or operating systems. Speaking of budget, this might be the major limitation for your build and the main reason why you simply won’t be able to get the best all-in-one solution.</p>
<p>In my case I wanted to have a PC which can handle some deep learning model prototypes and some quality gaming fun. Luckily, most specifications are quite similar for both use cases, but could have some pitfalls as well. I’ll highlight them in the upcoming sections.</p>
<div id="central-processing-unit" class="section level3">
<h3>Central Processing Unit</h3>
<p>For a decent gaming performance a CPU like the <strong>AMD Ryzen 7 3700X</strong> or <strong>Intel Core i7 9700K</strong> are sufficient. One of the later <strong>AMD Ryzen 5</strong> or <strong>Intel Core i5</strong> CPUs would do the job as well for less money. As the CPU only helps in batch scheduling and other small processes while the GPU is doing the actual model training, such a mid-range CPU should be fine for model prototyping. However, if you have GBs of data to preprocess and it fits in your budget, you might want to use the <strong>Intel Core i9 10980XE</strong> or the even more powerful <strong>AMD Ryzen Threadripper 3970X</strong>.</p>
</div>
<div id="cpu-cooler" class="section level3">
<h3>CPU Cooler</h3>
<p>Though, I decided to stick to the Wraith Prism cooler, which ships with the AMD Ryzen 7 3700X, I should have invested in a quieter one (e.g. the Dark Rock Pro 4 or the Noctua NH-D15). But in terms of cooling, it gets the job done. However, if you’re thinking about using a more powerful CPU and/or more than two GPUs, you should look into an all in one water cooling system. Just make sure the cooler fits in your case and on the socket you have.</p>
</div>
<div id="motherboard" class="section level3">
<h3>Motherboard</h3>
<p>The mobo is more important than I thought before. There are a few points to consider when making your decision:</p>
<ul>
<li>There are different sizes available and might be limited to the size of your case.</li>
<li>The socket has to fit your CPU.</li>
<li>You’ll need multiple PCIe lanes if you want to have more than one GPU (as a GPU is quite wide you might need 4 lanes for 2 GPUs).</li>
<li>The number of DIMM slots for your RAM sticks.</li>
<li>The number of M2 slots for NVMe SSDs.</li>
<li>The SATA slots for SSDs or HDDs.</li>
<li>Any other slots you need (e.g. Thunderbolt, USB)</li>
</ul>
<p>In case you want to upgrade your build it might come handy in the future to have some additional slots in general.</p>
</div>
<div id="memory" class="section level3">
<h3>Memory</h3>
<p>It might not be necessary to have more than 8-16 GB of RAM for gaming or smaller data-sets. But this also depends on your usage. As stated above, if you do a lot of preprocessing more RAM would help to increase speed. Still, there are a few important things to mention here. Make sure the RAM is supported by your motherboard. If you use more than one RAM stick don’t mix clock speeds. Stick to one type. And check your manual for the RAM installation, especially if you have multiple DIMM slots for your RAM.</p>
</div>
<div id="storage" class="section level3">
<h3>Storage</h3>
<p>Storage could be quite expensive and frustrating. Therefore, evaluate what’s important for you. You have the choice between <strong>HDD</strong>, <strong>SSD</strong>, and <strong>NVMe SSD</strong>.</p>
<p>The old <strong>HDD</strong> is a mechanical solution with a rotating magnetic disc with a brush for reading and writing bits on it. It’s comparably slow, large and sensitive to damage and corruption by external influences. But they are durable and much less expensive than the other options.</p>
<p><strong>SSDs</strong> are much faster than HDDs. They are safer as they don’t have any mechanical or moving parts.</p>
<p><strong>NVMe SSDs</strong> (Non-Volatile Memory Express) are the fastest option, but also the most expensive one. While regular SSDs have the bottleneck with their SATA 3 slots giving a max transfer of 600 Mbps, NVMe SSDs rely on PCIe with 2-3 GB/s. However, you have to check if your mobo has enough M2 slots and your storage is compatible with your mobo (check out the compatible components on the website of your mobo’s manufacturer).</p>
<p>For me a combination of 2 NVMe SSDs and a 1 TB HDD was a good combination. I installed the OS on the SSDs (one Windows the other Linux) and use the HDD for data storage (older games, large data-sets). So I always have the option to increase speed and use the SSD if needed for training or gaming.</p>
</div>
<div id="graphics-processing-unit" class="section level3">
<h3>Graphics Processing Unit</h3>
<p>GPUs would need much more detail than I can give here (see <a href="https://timdettmers.com/2019/04/03/which-gpu-for-deep-learning/">Tim Dettmers</a>’s blog for details). Therefore, I just briefly outline my experience.</p>
<p>I first thought about how many GPUs I should by. Reality hit me rather quick, though. First, it’s a very expensive part and second, I wouldn’t really need that many GPU power for what I plan to use my PC for. What is more, if I should find myself in the unlikely situation of running short of GPU power, there are still cloud services which scale nicely.</p>
<p>In terms of NVIDIA vs. AMD I choose NVIDIA simply because deep learning libraries support the NVIDIA environment better.</p>
</div>
<div id="case" class="section level3">
<h3>Case</h3>
<p>The decision of which case is best highly depends on your taste. However, it was helpful for me to consider some points when making my decision:</p>
<ul>
<li>Mobo size: Make sure your mobo fits in your case (could be quite annoying otherwise).</li>
<li>PSU fit: Although, you wouldn’t have any troubles most of the time, some special or rare cases might require a certain PSU.</li>
<li>Airflow vs. Quiet: Not all cases with good airflow are quiet and not all quiet cases have a good airflow. Although the difference seems to be rather small and with a few extra thoughts about cooling and cable management, neither option should negatively influence the performance. Additionally, be sure that your idea of cooling works out with your desired case (e.g. enough space for fans, radiators or the CPU cooler height).</li>
<li>Convenience:
<ul>
<li>Make sure to have audio jacks, USB, Thunderbolt, etc. slots available if you want them.</li>
<li>Cable management can be very different. Watch some of the videos about case assembling first to get an idea about what’s important (e.g. <a href="https://www.youtube.com/channel/UCvWWf-LYjaujE50iYai8WgQ">Pauls’s Hardware</a> or <a href="https://www.youtube.com/channel/UCftcLVz-jtPXoH3cWUUDwYw">Bitwit</a>).</li>
</ul></li>
</ul>
<p>Apart from that you might need some cable extensions, but you definitely need some zipping for a nice cable management.</p>
</div>
<div id="power-supply-unit" class="section level3">
<h3>Power Supply Unit</h3>
<p>Obviously, having enough watts for your build is important. To make sure to have enough power, check the specifications of your components on their manufacturer’s website. Simply sum up their power consumption and add about a 10% extra (e.g. your components need 650 watts go for a PSU which supplies at least 715 watts so you could round up to 750.). As a PSU should last rather long, while other components might get replaced, it could be a good idea to invest in a more powerful PSU. So you could upgrade your PC without buying a new PSU. Finally, in case you have multiple GPUs in your build, check if your PSU has enough PCIe 8-pin or 6-pin connectors to supply them with the power they need.</p>
</div>
<div id="assembling" class="section level3">
<h3>Assembling</h3>
<p>The major advice I can give as a first time builder: Plan enough time. Although, it looks easy and fast in the tutorials, you wouldn’t be able to build your PC in an hour without prior knowledge. Additionally, pay attention on how to handle your components (e.g. avoid static loading) and on cable management. Cable management could make a huge difference for your PCs performance as it might influence airflow and cause overheating components.</p>
<p>Apart from that, I hope this post was a bit helpful for building your own first PC. Feel free to contact me for any feedback :)</p>
</div>
</div>
<div id="references" class="section level2">
<h2>References</h2>
<p><a href="https://timdettmers.com/2019/04/03/which-gpu-for-deep-learning/">Which GPU(s) to Get for Deep Learning</a></p>
<p><a href="https://timdettmers.com/2018/12/16/deep-learning-hardware-guide/">A Full Hardware Guide to Deep Learning</a></p>
<p><a href="https://towardsdatascience.com/how-to-create-your-own-deep-learning-rig-a-complete-hardware-guide-2bba792b001b">How to create your own deep learning rig</a></p>
<div id="useful-links" class="section level3">
<h3>Useful links</h3>
<p><a href="https://pcpartpicker.com/">pc partpicker</a></p>
<p><a href="https://www.logicalincrements.com/">logical increments</a></p>
<p><a href="https://www.youtube.com/channel/UCvWWf-LYjaujE50iYai8WgQ">Pauls’s Hardware</a></p>
<p><a href="https://www.youtube.com/channel/UCftcLVz-jtPXoH3cWUUDwYw">Bitwit</a></p>
</div>
</div>
]]></content>
        </item>
        
    </channel>
</rss>
